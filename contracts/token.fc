{-
    #_ balance:Coins allowance:(HashmapE 256 Coins) = User;
    #_ balances:(HashmapE 256 User) total_supply:Coins name:^Cell symbol:^Cell decimals:uint8 admin:uint256 = Storage;
-}

#include "imports/stdlib.fc";

const int op::transfer = 0x38e6413f;
const int op::transfer_from = 0x56385563;
const int op::approve = 0x14b4e83e;
const int op::mint = 0x1bcc40ab;
const int op::transfer_notification = 0x8e77c97a;
const int op::approval_notification = 0x8ed3c35a;

const int error::wrong_workchain = 701;
const int error::not_enough_balance = 702;
const int error::not_enough_allowance = 703;
const int error::not_admin = 704;

global cell users;
global int total_supply;
global cell name;
global cell symbol;
global int decimals;
global int admin;

() load_data() impure {
    slice ds = get_data().begin_parse();
    users = ds~load_dict();
    total_supply = ds~load_coins();
    name = ds~load_ref();
    symbol = ds~load_ref();
    decimals = ds~load_uint(8);
    admin = ds~load_uint(256);
}

() save_data() impure {
    set_data(begin_cell()
        .store_dict(users)
        .store_coins(total_supply)
        .store_ref(name)
        .store_ref(symbol)
        .store_uint(decimals, 8)
        .store_uint(admin, 256)
    .end_cell());
}

(int, cell) get_user(int address) {
    (slice s, int f?) = users.udict_get?(256, address);
    if (f?) {
        return (s~load_coins(), s~load_dict());
    }
    return (0, new_dict());
}

() set_user(int address, int balance, cell allowances) impure {
    users.udict_set(256, address, begin_cell()
        .store_coins(balance)
        .store_dict(allowances)
    .end_cell().begin_parse());
}

(int) get_allowance(cell allowances, int address) {
    (slice v, int f?) = allowances.udict_get?(256, address);
    if (f?) {
        return (v~load_coins());
    }
    return 0;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    cs~skip_bits(4);
    slice sender_full = cs~load_msg_addr();
    (int workchain, int sender) = sender_full.parse_std_addr();
    throw_unless(error::wrong_workchain, workchain == 0);

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    if (op == op::transfer) {
        int recipient = in_msg_body~load_uint(256);
        int amount = in_msg_body~load_coins();
        (int balance, cell allowances) = get_user(sender);

        throw_unless(error::not_enough_balance, balance >= amount);

        (int recipient_balance, cell recipient_allowances) = get_user(recipient);
        set_user(sender, balance - amount, allowances);
        set_user(recipient, recipient_balance + amount, recipient_allowances);

        send_raw_message(begin_cell()
            .store_uint(0x10, 6)
            .store_uint(0x400, 11)
            .store_uint(recipient, 256)
            .store_coins(1000000)
            .store_uint(0, 107)
            .store_uint(op::transfer_notification, 32)
            .store_uint(query_id, 64)
            .store_uint(sender, 256)
            .store_coins(amount)
        .end_cell(), 1);
    }
    
    elseif (op == op::transfer_from) {
        int from = in_msg_body~load_uint(256);
        int recipient = in_msg_body~load_uint(256);
        int amount = in_msg_body~load_coins();
        (int balance, cell allowances) = get_user(from);
        int allowance = allowances.get_allowance(sender);
        
        throw_unless(error::not_enough_balance, balance >= amount);
        throw_unless(error::not_enough_allowance, allowance >= amount);

        (int recipient_balance, cell recipient_allowances) = get_user(recipient);
        allowances.udict_set(256, sender, begin_cell().store_coins(allowance - amount).end_cell().begin_parse());
        set_user(from, balance - amount, allowances);
        set_user(recipient, recipient_balance + amount, recipient_allowances);

        send_raw_message(begin_cell()
            .store_uint(0x10, 6)
            .store_uint(0x400, 11)
            .store_uint(recipient, 256)
            .store_coins(1000000)
            .store_uint(0, 107)
            .store_uint(op::transfer_notification, 32)
            .store_uint(query_id, 64)
            .store_uint(from, 256)
            .store_coins(amount)
        .end_cell(), 1);
    }
    
    elseif (op == op::approve) {
        int spender = in_msg_body~load_uint(256);
        int amount = in_msg_body~load_coins();
        (int balance, cell allowances) = get_user(sender);

        allowances.udict_set(256, spender, begin_cell().store_coins(amount).end_cell().begin_parse());
        set_user(sender, balance, allowances);

        send_raw_message(begin_cell()
            .store_uint(0x10, 6)
            .store_uint(0x400, 11)
            .store_uint(spender, 256)
            .store_coins(1000000)
            .store_uint(0, 107)
            .store_uint(op::approval_notification, 32)
            .store_uint(query_id, 64)
            .store_uint(sender, 256)
            .store_coins(amount)
        .end_cell(), 1);
    }

    elseif (op == op::mint) {
        throw_unless(error::not_admin, sender == admin);

        int recipient = in_msg_body~load_uint(256);
        int amount = in_msg_body~load_coins();
        (int balance, cell allowances) = get_user(sender);

        (int recipient_balance, cell recipient_allowances) = get_user(recipient);
        set_user(recipient, recipient_balance + amount, recipient_allowances);
        total_supply += amount;

        send_raw_message(begin_cell()
            .store_uint(0x10, 6)
            .store_uint(0x400, 11)
            .store_uint(recipient, 256)
            .store_coins(1000000)
            .store_uint(0, 107)
            .store_uint(op::transfer_notification, 32)
            .store_uint(query_id, 64)
            .store_uint(0, 256)
            .store_coins(amount)
        .end_cell(), 1);
    }

    else {
        return ();
    }

    save_data();
}

(slice, slice, int, int) get_token_data() method_id {
    load_data();
    return (name.begin_parse(), symbol.begin_parse(), decimals, total_supply);
}

(int) get_balance_of(slice address) method_id {
    load_data();
    (int workchain, int account_id) = parse_std_addr(address);
    throw_unless(error::wrong_workchain, workchain == 0);
    (int balance, cell allowances) = get_user(account_id);
    return balance;
}

(int) get_allowance_of(slice owner, slice spender) method_id {
    load_data();
    (int workchain, int account_id) = parse_std_addr(owner);
    throw_unless(error::wrong_workchain, workchain == 0);
    (int spender_workchain, int spender_account_id) = parse_std_addr(spender);
    throw_unless(error::wrong_workchain, spender_workchain == 0);
    (int balance, cell allowances) = get_user(account_id);
    return get_allowance(allowances, spender_account_id);
}